import React, { useState, useEffect } from 'react'
import { Calendar, Plus, List, Settings, Users, Bell, Menu, X } from 'lucide-react'
import { format, parseISO } from 'date-fns'
import { ru } from 'date-fns/locale'
import { Analytics } from '@vercel/analytics/react'
import { useNotifications } from './hooks/useNotifications'
import { useTelegramApp } from './hooks/useTelegramApp'
import { useAuth, useEvents } from './hooks/useApi'
import EventForm from './components/EventForm'
import CalendarView from './components/CalendarView'
import EventList from './components/EventList'
import EventView from './components/EventView'
import PairSetup from './components/PairSetup'
import PairRequired from './components/PairRequired'
import NotificationSettings from './components/NotificationSettings'
import ProfileSettings from './components/ProfileSettings'

function App() {
  const [events, setEvents] = useState([])
  const [activeTab, setActiveTab] = useState('calendar')
  const [showEventForm, setShowEventForm] = useState(false)
  const [showEventView, setShowEventView] = useState(false)
  const [showPairSetup, setShowPairSetup] = useState(false)
  const [showNotificationSettings, setShowNotificationSettings] = useState(false)
  const [showProfileSettings, setShowProfileSettings] = useState(false)
  const [selectedDate, setSelectedDate] = useState(null)
  const [selectedEvent, setSelectedEvent] = useState(null)
  const [showMobileSidebar, setShowMobileSidebar] = useState(false)
  const [editingEvent, setEditingEvent] = useState(null)

  const { sendNotification, sendPairNotification } = useNotifications()
  const { user: telegramUser, theme, showAlert } = useTelegramApp()
  const { user, login, createPair, joinPair, logout } = useAuth()
  const { fetchEvents, createEvent: apiCreateEvent, updateEvent: apiUpdateEvent, deleteEvent: apiDeleteEvent, loading } = useEvents()

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (telegramUser && !user) {
      login(telegramUser.id, telegramUser.first_name)
    }
  }, [telegramUser, user, login])

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (user) {
      loadEvents()
    }
  }, [user])

  const loadEvents = async () => {
    try {
      const eventsData = await fetchEvents()
      setEvents(eventsData)
    } catch (error) {
      console.error('Failed to load events:', error)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const addEvent = async (eventData) => {
    try {
      const newEvent = await apiCreateEvent({
        ...eventData,
        completed: false,
        assignedTo: eventData.assignedTo || 'both'
      })

      setEvents(prev => [...prev, newEvent])
      setShowEventForm(false)
      setEditingEvent(null)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await sendNotification(
        `‚ú® –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${newEvent.title}`,
        { body: `–°–æ–∑–¥–∞–Ω–æ: ${newEvent.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}` }
      )

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
      if (user?.partnerId) {
        await sendPairNotification('created', user?.name || '–ü–∞—Ä—Ç–Ω–µ—Ä')
      }

      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      if (newEvent.reminder?.enabled && newEvent.reminder?.time) {
        const reminderDelay = newEvent.reminder.time * 60 * 1000
        const eventTime = new Date(newEvent.date).getTime()
        const reminderTime = eventTime - reminderDelay
        
        if (reminderTime > Date.now()) {
          setTimeout(async () => {
            await sendNotification(
              `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${newEvent.title}`,
              { body: `–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${newEvent.reminder.time} –º–∏–Ω—É—Ç` }
            )
          }, reminderTime - Date.now())
        }
      }

      showAlert('–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!')
    } catch (error) {
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è')
      console.error('Create event error:', error)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const toggleEvent = async (eventId) => {
    try {
      const event = events.find(e => e._id === eventId || e.id === eventId)
      if (!event) return

      const updatedEvent = { ...event, completed: !event.completed }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ API
      await apiUpdateEvent(event._id || event.id, updatedEvent)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setEvents(prev => prev.map(e => 
        (e._id === eventId || e.id === eventId) ? updatedEvent : e
      ))
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      sendNotification(
        `${updatedEvent.completed ? '‚úÖ' : 'üîÑ'} ${updatedEvent.completed ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ'}: ${updatedEvent.title}`,
        { body: updatedEvent.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' }
      )
    } catch (error) {
      console.error('Toggle event error:', error)
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è')
    }
  }

  // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  useEffect(() => {
    const handleEventsUpdated = (e) => {
      if (e.detail && e.detail.events) {
        setEvents(e.detail.events)
      }
    }

    window.addEventListener('eventsUpdated', handleEventsUpdated)
    
    return () => {
      window.removeEventListener('eventsUpdated', handleEventsUpdated)
    }
  }, []) // –£–±–∏—Ä–∞–µ–º setEvents –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π



  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const deleteEvent = async (eventId) => {
    try {
      const eventToDelete = events.find(e => e._id === eventId || e.id === eventId)
      if (!eventToDelete) return
      
      if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${eventToDelete.title}"?`)) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ API
        await apiDeleteEvent(eventToDelete._id || eventToDelete.id)
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setEvents(prev => prev.filter(event => (event._id !== eventId && event.id !== eventId)))
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await sendNotification(
          `üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: ${eventToDelete.title}`,
          { body: '–°–æ–±—ã—Ç–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ' }
        )
      }
    } catch (error) {
      console.error('Delete event error:', error)
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è')
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const editEvent = (event) => {
    setEditingEvent(event)
    setShowEventForm(true)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏—è
  const viewEvent = (event) => {
    setSelectedEvent(event)
    setShowEventView(true)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
  const createEventOnDate = (date) => {
    setSelectedDate(date)
    setShowEventForm(true)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const updateEvent = async (eventData) => {
    try {
      const updatedEvent = { ...editingEvent, ...eventData, updatedAt: new Date().toISOString() }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ API
      await apiUpdateEvent(editingEvent._id || editingEvent.id, updatedEvent)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setEvents(prev => prev.map(event => 
        (event._id === editingEvent._id || event.id === editingEvent.id) ? updatedEvent : event
      ))
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      sendNotification(
        `‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedEvent.title}`,
        { body: updatedEvent.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' }
      )

      setShowEventForm(false)
      setEditingEvent(null)
      showAlert('–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
    } catch (error) {
      console.error('Update event error:', error)
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è')
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  useEffect(() => {
    const checkOverdueTasks = () => {
      const now = new Date()
      const overdueTasks = events.filter(event => 
        event.type === 'task' && 
        !event.completed && 
        new Date(event.date) < now
      )

      overdueTasks.forEach(task => {
        sendNotification(
          `üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${task.title}`,
          { body: `–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ${format(new Date(task.date), 'dd.MM.yyyy')}` }
        )
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    const interval = setInterval(checkOverdueTasks, 60 * 60 * 1000)
    checkOverdueTasks() // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

    return () => clearInterval(interval)
  }, [events, sendNotification])

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã
  if (!user?.partnerId) {
    return (
      <div className={`min-h-screen iphone-no-scroll ${theme === 'dark' ? 'dark' : ''}`}>
        <Analytics />
        <PairRequired onCreatePair={() => setShowPairSetup(true)} />
        
        {/* Pair Setup Modal */}
        {showPairSetup && (
          <PairSetup 
            onClose={() => setShowPairSetup(false)} 
            onPairCreated={() => {
              setShowPairSetup(false)
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              window.location.reload()
            }}
          />
        )}
      </div>
    )
  }

  return (
    <div className={`min-h-screen iphone-no-scroll ${theme === 'dark' ? 'dark' : ''}`}>
      <Analytics />
      
      {/* Header */}
      <header className="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700 header-safe-super">
        <div className="max-w-7xl mx-auto px-2 sm:px-4 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo and Title */}
            <div className="flex items-center">
              <button
                onClick={() => setShowMobileSidebar(true)}
                className="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <Menu size={20} />
              </button>
              
              <div className="flex items-center gap-3">
                <Calendar className="w-8 h-8 text-blue-600" />
                <h1 className="text-xl font-bold text-gray-900 dark:text-white">
                  DCalendar
                </h1>
              </div>
            </div>

            {/* Header Actions */}
            <div className="flex items-center gap-2">
              {/* Pair Status */}
              {user?.partnerId && (
                <div className="hidden sm:flex items-center gap-2 px-3 py-1 bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 rounded-full text-sm">
                  <Users size={16} />
                  <span>–í –ø–∞—Ä–µ</span>
                  <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                </div>
              )}

              {/* Pair Setup Button */}
              <button
                onClick={() => setShowPairSetup(true)}
                className="p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—ã"
              >
                <Users size={20} />
              </button>

              {/* Notification Settings */}
              <button
                onClick={() => setShowNotificationSettings(true)}
                className="p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
              >
                <Bell size={20} />
              </button>

              {/* Profile Settings */}
              <button
                onClick={() => setShowProfileSettings(true)}
                className="p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
              >
                <Settings size={20} />
              </button>

              {/* Add Event Button */}
              <button
                onClick={() => setShowEventForm(true)}
                className="btn-primary flex items-center gap-2"
              >
                <Plus size={20} />
                <span className="hidden sm:inline">–î–æ–±–∞–≤–∏—Ç—å</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-2 sm:px-4 lg:px-8 py-4 sm:py-6 main-safe-extra">
        {/* Tab Navigation */}
        <div className="flex space-x-1 bg-gray-100 dark:bg-gray-800 p-1 rounded-lg mb-6">
          <button
            onClick={() => setActiveTab('calendar')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'calendar'
                ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm'
                : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'
            }`}
          >
            <Calendar size={16} className="inline mr-2" />
            –ö–∞–ª–µ–Ω–¥–∞—Ä—å
          </button>
          <button
            onClick={() => setActiveTab('list')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === 'list'
                ? 'bg-white dark:bg-gray-700 text-gray-900 dark:text-white shadow-sm'
                : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'
            }`}
          >
            <List size={16} className="inline mr-2" />
            –°–ø–∏—Å–æ–∫
          </button>
        </div>

        {/* Tab Content */}
        {activeTab === 'calendar' && (
          <CalendarView
            events={events}
            onEventClick={viewEvent}
            onCreateEvent={createEventOnDate}
          />
        )}

        {activeTab === 'list' && (
          <EventList
            events={events}
            onToggle={toggleEvent}
            onDelete={deleteEvent}
            onEdit={editEvent}
          />
        )}
      </main>

      {/* Mobile Sidebar */}
      {showMobileSidebar && (
        <div className="fixed inset-0 z-50 lg:hidden">
          <div className="fixed inset-0 bg-black bg-opacity-50" onClick={() => setShowMobileSidebar(false)} />
          <div className="fixed left-0 top-0 h-full w-64 bg-white dark:bg-gray-900 shadow-xl">
            <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">–ú–µ–Ω—é</h2>
              <button
                onClick={() => setShowMobileSidebar(false)}
                className="p-1 rounded-md text-gray-400 hover:text-gray-500"
              >
                <X size={20} />
              </button>
            </div>
            
            <div className="p-4 space-y-4">
              <button
                onClick={() => {
                  setShowPairSetup(true)
                  setShowMobileSidebar(false)
                }}
                className="w-full btn-secondary flex items-center gap-2"
              >
                <Users size={20} />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—ã
              </button>
              
              <button
                onClick={() => {
                  setShowNotificationSettings(true)
                  setShowMobileSidebar(false)
                }}
                className="w-full btn-secondary flex items-center gap-2"
              >
                <Bell size={20} />
                –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              </button>

              <button
                onClick={() => {
                  setShowProfileSettings(true)
                  setShowMobileSidebar(false)
                }}
                className="w-full btn-secondary flex items-center gap-2"
              >
                <Settings size={20} />
                –ü—Ä–æ—Ñ–∏–ª—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modals */}
      {showEventForm && (
        <EventForm
          onSubmit={editingEvent ? updateEvent : addEvent}
          onClose={() => {
            setShowEventForm(false)
            setEditingEvent(null)
            setSelectedDate(null)
          }}
          event={editingEvent}
          selectedDate={selectedDate}
        />
      )}

      {showEventView && selectedEvent && (
        <EventView
          event={selectedEvent}
          onClose={() => {
            setShowEventView(false)
            setSelectedEvent(null)
          }}
          onToggle={toggleEvent}
          onEdit={(event) => {
            setShowEventView(false)
            setSelectedEvent(null)
            editEvent(event)
          }}
        />
      )}

      {showPairSetup && (
        <PairSetup onClose={() => setShowPairSetup(false)} />
      )}

      {showNotificationSettings && (
        <NotificationSettings 
          onClose={() => setShowNotificationSettings(false)}
        />
      )}

      {showProfileSettings && (
        <ProfileSettings 
          onClose={() => setShowProfileSettings(false)}
        />
      )}

      {/* Floating Action Button for Mobile */}
      <button
        onClick={() => setShowEventForm(true)}
        className="fixed lg:hidden w-14 h-14 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg flex items-center justify-center transition-colors z-40 float-safe"
      >
        <Plus size={24} />
      </button>
    </div>
  )
}

export default App
