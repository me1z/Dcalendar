import React from 'react'
import { X, CheckCircle, Circle, Calendar, Clock, Tag, MapPin, Bell, Star } from 'lucide-react'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'

function EventView({ event, onClose, onToggle, onEdit }) {
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-800'
      case 'high': return 'bg-orange-100 text-orange-800'
      case 'medium': return 'bg-yellow-100 text-yellow-800'
      case 'low': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getPriorityIcon = (priority) => {
    switch (priority) {
      case 'urgent': return <Star size={16} className="text-red-600" />
      case 'high': return <Star size={16} className="text-orange-600" />
      case 'medium': return <Star size={16} className="text-yellow-600" />
      case 'low': return <Star size={16} className="text-green-600" />
      default: return <Star size={16} className="text-gray-600" />
    }
  }

  const getPriorityLabel = (priority) => {
    switch (priority) {
      case 'urgent': return '–°—Ä–æ—á–Ω–æ'
      case 'high': return '–í—ã—Å–æ–∫–∏–π'
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π'
      case 'low': return '–ù–∏–∑–∫–∏–π'
      default: return '–ù–µ —É–∫–∞–∑–∞–Ω'
    }
  }

  const getTypeIcon = (type) => {
    switch (type) {
      case 'task': return <CheckCircle size={20} className="text-blue-600" />
      case 'event': return <Calendar size={20} className="text-green-600" />
      case 'reminder': return <Bell size={20} className="text-orange-600" />
      default: return <Calendar size={20} className="text-gray-600" />
    }
  }

  const getTypeLabel = (type) => {
    switch (type) {
      case 'task': return '–ó–∞–¥–∞—á–∞'
      case 'event': return '–°–æ–±—ã—Ç–∏–µ'
      case 'reminder': return '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'
      default: return '–°–æ–±—ã—Ç–∏–µ'
    }
  }

  const getAssignedToLabel = (assignedTo) => {
    switch (assignedTo) {
      case 'me': return '–ú–Ω–µ'
      case 'partner': return '–ü–∞—Ä—Ç–Ω–µ—Ä—É'
      case 'both': return '–ù–∞–º –æ–±–æ–∏–º'
      default: return assignedTo || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'
    }
  }

  const getAssignedToIcon = (assignedTo) => {
    switch (assignedTo) {
      case 'me': return 'üë§'
      case 'partner': return 'üë•'
      case 'both': return 'üíë'
      default: return 'üë§'
    }
  }

  const getCategoryLabel = (category) => {
    const categories = {
      general: '–û–±—â–µ–µ',
      work: '–†–∞–±–æ—Ç–∞',
      personal: '–õ–∏—á–Ω–æ–µ',
      health: '–ó–¥–æ—Ä–æ–≤—å–µ',
      travel: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
      shopping: '–ü–æ–∫—É–ø–∫–∏',
      family: '–°–µ–º—å—è',
      entertainment: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'
    }
    return categories[category] || category
  }

  const getCategoryIcon = (category) => {
    const icons = {
      general: 'üìÖ',
      work: 'üíº',
      personal: 'üë§',
      health: 'üè•',
      travel: '‚úàÔ∏è',
      shopping: 'üõí',
      family: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
      entertainment: 'üéâ'
    }
    return icons[category] || 'üìÖ'
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-900 rounded-xl w-full max-w-sm max-h-[95vh] overflow-y-auto safe-area-all">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center gap-2">
            {getTypeIcon(event.type)}
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
              {getTypeLabel(event.type)}
            </h2>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
          >
            <X size={20} />
          </button>
        </div>

        <div className="p-4 space-y-4">
          {/* Title */}
          <div>
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
              {event.title}
            </h3>
            {event.description && (
              <p className="text-gray-600 dark:text-gray-400">
                {event.description}
              </p>
            )}
          </div>

          {/* Date and Time */}
          <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
            <Calendar size={16} />
            <span className="text-sm">
              {format(new Date(event.date), 'EEEE, d MMMM yyyy', { locale: ru })}
            </span>
          </div>

          {event.time && (
            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
              <Clock size={16} />
              <span className="text-sm">
                {format(new Date(event.date), 'HH:mm')}
              </span>
            </div>
          )}

          {/* Priority */}
          {event.priority && (
            <div className="flex items-center gap-2">
              {getPriorityIcon(event.priority)}
              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(event.priority)}`}>
                {getPriorityLabel(event.priority)}
              </span>
            </div>
          )}

          {/* Assigned To */}
          {event.assignedTo && (
            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
              <span className="text-lg">{getAssignedToIcon(event.assignedTo)}</span>
              <span className="text-sm">{getAssignedToLabel(event.assignedTo)}</span>
            </div>
          )}

          {/* Category */}
          {event.category && event.category !== 'general' && (
            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
              <span className="text-lg">{getCategoryIcon(event.category)}</span>
              <span className="text-sm">{getCategoryLabel(event.category)}</span>
            </div>
          )}

          {/* Location */}
          {event.location && (
            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
              <MapPin size={16} />
              <span className="text-sm">{event.location}</span>
            </div>
          )}

          {/* Reminder */}
          {event.reminder?.enabled && (
            <div className="flex items-center gap-2 text-gray-600 dark:text-gray-400">
              <Bell size={16} />
              <span className="text-sm">
                –ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ {event.reminder.time} –º–∏–Ω—É—Ç
              </span>
            </div>
          )}

          {/* Completion Status */}
          {event.type === 'task' && (
            <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                </span>
                <button
                  onClick={() => onToggle(event.id)}
                  className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                >
                  {event.completed ? (
                    <CheckCircle size={24} className="text-green-600" />
                  ) : (
                    <Circle size={24} className="text-gray-400" />
                  )}
                </button>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
                {event.completed ? '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}
              </p>
            </div>
          )}

          {/* Actions */}
          <div className="flex gap-3 pt-4">
            {event.type === 'task' && (
              <button
                onClick={() => onToggle(event.id)}
                className={`flex-1 py-3 px-4 rounded-lg font-medium transition-colors ${
                  event.completed
                    ? 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    : 'bg-green-100 text-green-700 hover:bg-green-200'
                }`}
              >
                {event.completed ? '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' : '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π'}
              </button>
            )}
            <button
              onClick={() => onEdit(event)}
              className="btn-secondary flex-1"
            >
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default EventView
