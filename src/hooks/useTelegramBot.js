import { useState, useEffect, useCallback } from 'react'

export function useTelegramBot() {
  const [botToken, setBotToken] = useState('')
  const [chatId, setChatId] = useState('')
  const [isConnected, setIsConnected] = useState(false)
  const [botInfo, setBotInfo] = useState(null)
  const [isLoading, setIsLoading] = useState(false)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedToken = localStorage.getItem('telegramBotToken')
    const savedChatId = localStorage.getItem('telegramChatId')
    
    if (savedToken && savedChatId) {
      setBotToken(savedToken)
      setChatId(savedChatId)
      checkBotConnection(savedToken, savedChatId)
    }
  }, [])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
  const checkBotConnection = useCallback(async (token, chatId) => {
    if (!token || !chatId) return false
    
    setIsLoading(true)
    try {
      const response = await fetch(`https://api.telegram.org/bot${token}/getMe`)
      const data = await response.json()
      
      if (data.ok) {
        setBotInfo(data.result)
        setIsConnected(true)
        return true
      } else {
        setIsConnected(false)
        return false
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error)
      setIsConnected(false)
      return false
    } finally {
      setIsLoading(false)
    }
  }, [])

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
  const sendNotification = useCallback(async (message, options = {}) => {
    if (!isConnected || !botToken || !chatId) {
      console.warn('Telegram Bot –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return false
    }

    try {
      const text = options.parseMode === 'HTML' 
        ? message 
        : message.replace(/[<>&]/g, (char) => {
            const entities = { '<': '&lt;', '>': '&gt;', '&': '&amp;' }
            return entities[char]
          })

      const params = new URLSearchParams({
        chat_id: chatId,
        text: text,
        parse_mode: options.parseMode || 'HTML',
        disable_web_page_preview: options.disableWebPagePreview || true
      })

      if (options.replyMarkup) {
        params.append('reply_markup', JSON.stringify(options.replyMarkup))
      }

      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: params
      })

      const data = await response.json()
      
      if (data.ok) {
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data.result)
        return true
      } else {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data)
        return false
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      return false
    }
  }, [isConnected, botToken, chatId])

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
  const sendEventNotification = useCallback(async (event, type = 'reminder') => {
    const emoji = {
      reminder: '‚è∞',
      created: '‚ú®',
      updated: '‚úèÔ∏è',
      completed: '‚úÖ',
      overdue: 'üö®'
    }

    const typeText = {
      reminder: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
      created: '–°–æ–∑–¥–∞–Ω–æ',
      updated: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
      completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      overdue: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
    }

    const message = `
${emoji[type]} <b>${typeText[type]}</b>

üìÖ <b>${event.title}</b>
${event.description ? `üìù ${event.description}\n` : ''}
üïê ${new Date(event.date).toLocaleString('ru-RU')}
${event.location ? `üìç ${event.location}\n` : ''}
${event.type === 'task' ? `üë§ ${event.assignedTo || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'}` : ''}
    `.trim()

    return await sendNotification(message, { parseMode: 'HTML' })
  }, [sendNotification])

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—Ä–µ
  const sendPairNotification = useCallback(async (action, partnerName) => {
    const messages = {
      connected: `üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞—Ä–µ</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ ${partnerName}!`,
      disconnected: `üîå <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä—ã</b>\n\n–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç ${partnerName}.`,
      synced: `üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</b>\n\n–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å ${partnerName}.`
    }

    const message = messages[action] || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    return await sendNotification(message, { parseMode: 'HTML' })
  }, [sendNotification])

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
  const connectBot = useCallback(async (token, chatId) => {
    setIsLoading(true)
    try {
      const success = await checkBotConnection(token, chatId)
      
      if (success) {
        setBotToken(token)
        setChatId(chatId)
        localStorage.setItem('telegramBotToken', token)
        localStorage.setItem('telegramChatId', chatId)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await sendNotification('ü§ñ <b>DCalendar –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.', { parseMode: 'HTML' })
      }
      
      return success
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error)
      return false
    } finally {
      setIsLoading(false)
    }
  }, [checkBotConnection, sendNotification])

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
  const disconnectBot = useCallback(() => {
    setBotToken('')
    setChatId('')
    setIsConnected(false)
    setBotInfo(null)
    localStorage.removeItem('telegramBotToken')
    localStorage.removeItem('telegramChatId')
  }, [])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  const getBotInfo = useCallback(async () => {
    if (!botToken) return null
    
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/getMe`)
      const data = await response.json()
      
      if (data.ok) {
        return data.result
      }
      return null
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error)
      return null
    }
  }, [botToken])

  return {
    botToken,
    chatId,
    isConnected,
    botInfo,
    isLoading,
    sendNotification,
    sendEventNotification,
    sendPairNotification,
    connectBot,
    disconnectBot,
    getBotInfo,
    checkBotConnection
  }
}
